#Вариант 18
# задания изменить

import numpy as np # можем делать все и через списки, но numpy быстрее
import copy

class MatModel():
  def __init__(self):
    print("Hello\nTo make the tasks, just call them\n")
  
  def task_1(self, matr1, matr2 , steps, stat1, stat2):
    for n in range(steps):
      matr2 = matr2.dot(matr1)
    print(b[stat1][stat2])


  def task_2(self, matr1,matr2,steps,A):
    for _ in range(steps):
        matr2 = matr2.dot(matr1)
    matr2 = matr2.dot(A)   
    print(matr2) # добавить бы тут ретюрну


  def task_3(self, matr1, matr2, steps):
    for l in range(1, steps): #шаги(сколько шагов, столко и циклов)
        for i in range(len(matr1)):
            for j in range(len(matr1)):
                matr3[i][j] = 0
                for m in range(len(matr1)):
                    if m != j:
                        matr3[i][j] += matr2[m][j] * matr1[i][m]
        for x in range(len(matr3)): # аналог deepcopy
            for y in range(len(matr3)):
                matr2[x][y] = matr3[x][y]
    print(matr2[i1][j1])   


  def task_4(self, matr1, matr2,matr3,matr4, steps):
    for l in range(1, steps):
        for i in range(len(matr1)):
            for j in range(len(matr1)):
                matr3[i][j] = 0
                for m in range(len(matr1)):
                    if m != j:
                        matr3[i][j] += matr2[m][j] * matr1[i][m]
        matr2 = copy.deepcopy(matr3)
        matr4 = matr4 + np.array(matr2)
    print(d[i1][j1]) 


  def task_5(self, matr1, matr2):
    print("now")


  def task_6(self, matr1, matr2):
    print("now")


  def task_7(self, matr1, matr2):
    print("now")


  def task_8(self, matr1, matr2):
    print("now")


  def task_9(self, matr1, matr2):
    print("now")


  def task_A(self, matr1, matr2):
    print("now")


  def task_B(self, matr1, matr2):
    print("now")

  def task_C(self, matr1, matr2):
    print("now")


  def task_D(self, matr1, matr2):
    print("now")

  def task_E(self, matr1, matr2):
    print("now")


  def task_F(self, matr1, matr2):
    print("now")


  def task_G(self, matr1, matr2):
    print("now")


  def task_H(self, matr1, matr2):
    print("now")


  def task_I(self, matr1, matr2):
    print("now")





# АТР класса
Mat=MatModel()

# Задание 1
print ("Система имеем 16 дискретных состояний. Изменение состояний происходит в дискретные моменты времени с заданной вероятность. Схема марковского процесса изображена на рисунке. Требуется определить:\nВероятность того, что за 5 шагов система перейдет из состояния 13 в состояние 7")

# вероятность того, что за 5 шагов система перейдет из состояния 13 в состояние 7;
steps = 4 # k
stat1 = 12 #i
stat2 =6 # j


A=(0.05,0.05,0,0.09,0.11,0.1,0.14,0.06,0.08,0.03,0.07,0.01,0.09,0.07,0.01,0.04) # В начальный момент вероятность состояний была такой

# Схема марковского процесса, которая была на рисунке, сейчас находится ниже
# sample
matr = np.array([[0.28	,0.48,	0,	0,	0.13,	0.11,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
[0,	0.22,	0	,0,	0.55,	0,	0.23,	0,	0,	0,	0,	0,	0,	0,	0,	0],
[0,	0.17,	0.06,	0,	0.46,	0,	0.31,	0,	0,	0,	0,	0,	0,	0,	0,	0],
[0,	0,	0,	0.21,	0,	0.39,	0.4,	0,	0,	0,	0,	0,	0,	0,	0,	0],
[0.41,	0	,0.19,	0,	0.08,	0.13	,0	,0.08	,0	,0.11	,0	,0	,0	,0	,0	,0],
[0	,0.03	,0	,0.15	,0.35	,0.05	,0	,0	,0.26	,0	,0.16	,0	,0	,0	,0,	0],
[0	,0	,0	,0	,0	,0.42	,0.58	,0	,0	,0	,0	,0	,0	,0	,0	,0],
[0,	0,	0,	0,	0,	0,	0.01,	0.03,	0.22,	0,	0,	0.21,	0.2,	0,	0,	0.33],
[0	,0	,0	,0	,0	,0	,0.13,	0.29,	0.28,	0.3	,0	,0	,0	,0	,0	,0],
[0,	0,	0,	0,	0.16,	0.07,	0.04,	0,	0.17,	0.12,	0.09,	0.17,	0.06,	0.11,	0.01,	0],
[0,	0,	0,	0,	0,	0,	0.24,	0	,0,	0,	0.27,	0.16,	0,	0.17,	0.01,	0.15],
[0	,0	,0,	0	,0	,0	,0	,0	,0	,0	,0	,0.12	,0.88	,0	,0	,0],
[0,	0,	0,	0,	0,	0,	0,	0.32,	0	,0.6	,0,	0.01,	0.07,	0,	0,	0],
[0	,0	,0	,0	,0	,0	,0	,0	,0.1,	0.18	,0.23	,0	,0.18	,0.31	,0	,0],
[0,	0,	0,	0	,0	,0	,0,	0,	0	,0	,0.53,	0,	0,	0.39,	0.08,	0],
[0	,0	,0	,0	,0	,0	,0	,0	,0	,0.33	,0	,0	,0	,0,	0.2	,0.47]])

#a
matr1=np.copy(matr)
#b
matr2 =np.copy(matr) # копируем матрицу для дальнейших действий с ней
   
#task1

print ("\nвероятности состояний системы спустя 6 шагов, если в начальный момент вероятность состояний были следующими A=(0,05;0,05;0;0,09;0,11;0,1;0,14;0,06;0,08;0,03;0,07;0,01;0,09;0,07;0,01;0,04);\n")

# вероятности состояний системы спустя 8 шагов, если в начальный момент вероятность состояний были следующими A=(0,05;0,08;0,11;0,02;0,09;0,02;0,12;0,07;0,06;0,1;0,03;0,07;0;0,09;0,04;0,05);



#Ответ: 
#[0.07316013 0.07395482 0.07235281 0.07240355 #0.07259327 0.07079489
# 0.07082528 0.06641175 0.06928305 0.07076439 0.06393473 0.07002135
# 0.06888968 0.06730088 0.06897415 0.06856567]   

#task2

print ("\nвероятность первого перехода за 9 шагов из состояния 11 в состояние 8;\n")
steps=9
stat1=10
stat2=7

matr1=np.copy(matr)
matr2=np.copy(matr)
matr3=np.copy(matr)

  
# вероятность первого перехода за 7 шагов из состояния 5 в состояние 9;
# k = 7
# i1 = 4
# j1 = 8


# matr2=np.copy(matr1)
# matr3=np.copy(matr1)

# for l in range(1, steps+1): #шаги(сколько шагов, столко и циклов)
#     for i in range(len(matr1)):
#         for j in range(len(matr1)):
#             matr3[i][j] = 0
#             for m in range(len(matr1)):
#                 if m != j:
#                     c[i][j] += matr2[m][j] * matr1[i][m]
#     for x in range(len(matr3)): # аналог deepcopy
#         for y in range(len(matr3)):
#             matr2[x][y] = matr3[x][y]
# print(matr2[i1][j1])         
# Ответ: 0.018675843382940004



#task 3



print ("\nвероятность перехода из состояния 11 в состояние 6 не позднее чем за 8 шагов;\n")

steps=8
stat1=10
stat2=5

matr1=np.copy(matr)
matr2=np.copy(matr)
matr3=np.copy(matr)
matr4=np.copy(matr)


# вероятность перехода из состояния 8 в состояние 6 не позднее чем за 7 шагов;


# k = 7
# i1 = 7
# j1 = 5
# a = [[0.07,0.2,0,0,0.73,0,0,0,0,0,0,0,0,0,0,0],
# [0.16,0.72,0,0.04,0.08,0,0,0,0,0,0,0,0,0,0,0],
# [0,0.27,0.23,0.16,0,0.22,0.12,0,0,0,0,0,0,0,0,0],
# [0.18,0.39,0,0.05,0,0,0,0,0.05,0.33,0,0,0,0,0,0],
# [0.19,0,0,0,0.64,0.17,0,0,0,0,0,0,0,0,0,0],
# [0.26,0.02,0,0,0.22,0.14,0.13,0.13,0.1,0,0,0,0,0,0,0],
# [0,0,0.37,0,0,0.33,0.07,0,0.23,0,0,0,0,0,0,0],
# [0,0,0,0.15,0,0,0,0.05,0.23,0,0.22,0,0,0.35,0,0],
# [0,0,0,0.31,0.27,0,0,0.37,0.05,0,0,0,0,0,0,0],
# [0,0,0,0.29,0.2,0,0.2,0,0,0.04,0.08,0.19,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0.53,0,0,0,0,0.47],
# [0,0,0,0,0,0,0,0,0,0.83,0,0.09,0,0,0.08,0],
# [0,0,0,0,0,0,0,0,0.24,0,0,0.35,0.04,0,0,0.37],
# [0,0,0,0,0,0,0,0.27,0.18,0.13,0,0,0.14,0.03,0.25,0],
# [0,0,0,0,0,0,0,0,0,0,0,0.37,0.16,0,0.47,0],
# [0,0,0,0,0,0,0,0,0,0,0,0.15,0,0,0,0.85]]
# b = [[0.07,0.2,0,0,0.73,0,0,0,0,0,0,0,0,0,0,0],
# [0.16,0.72,0,0.04,0.08,0,0,0,0,0,0,0,0,0,0,0],
# [0,0.27,0.23,0.16,0,0.22,0.12,0,0,0,0,0,0,0,0,0],
# [0.18,0.39,0,0.05,0,0,0,0,0.05,0.33,0,0,0,0,0,0],
# [0.19,0,0,0,0.64,0.17,0,0,0,0,0,0,0,0,0,0],
# [0.26,0.02,0,0,0.22,0.14,0.13,0.13,0.1,0,0,0,0,0,0,0],
# [0,0,0.37,0,0,0.33,0.07,0,0.23,0,0,0,0,0,0,0],
# [0,0,0,0.15,0,0,0,0.05,0.23,0,0.22,0,0,0.35,0,0],
# [0,0,0,0.31,0.27,0,0,0.37,0.05,0,0,0,0,0,0,0],
# [0,0,0,0.29,0.2,0,0.2,0,0,0.04,0.08,0.19,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0.53,0,0,0,0,0.47],
# [0,0,0,0,0,0,0,0,0,0.83,0,0.09,0,0,0.08,0],
# [0,0,0,0,0,0,0,0,0.24,0,0,0.35,0.04,0,0,0.37],
# [0,0,0,0,0,0,0,0.27,0.18,0.13,0,0,0.14,0.03,0.25,0],
# [0,0,0,0,0,0,0,0,0,0,0,0.37,0.16,0,0.47,0],
# [0,0,0,0,0,0,0,0,0,0,0,0.15,0,0,0,0.85]]
# c = [[0.07,0.2,0,0,0.73,0,0,0,0,0,0,0,0,0,0,0],
# [0.16,0.72,0,0.04,0.08,0,0,0,0,0,0,0,0,0,0,0],
# [0,0.27,0.23,0.16,0,0.22,0.12,0,0,0,0,0,0,0,0,0],
# [0.18,0.39,0,0.05,0,0,0,0,0.05,0.33,0,0,0,0,0,0],
# [0.19,0,0,0,0.64,0.17,0,0,0,0,0,0,0,0,0,0],
# [0.26,0.02,0,0,0.22,0.14,0.13,0.13,0.1,0,0,0,0,0,0,0],
# [0,0,0.37,0,0,0.33,0.07,0,0.23,0,0,0,0,0,0,0],
# [0,0,0,0.15,0,0,0,0.05,0.23,0,0.22,0,0,0.35,0,0],
# [0,0,0,0.31,0.27,0,0,0.37,0.05,0,0,0,0,0,0,0],
# [0,0,0,0.29,0.2,0,0.2,0,0,0.04,0.08,0.19,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0.53,0,0,0,0,0.47],
# [0,0,0,0,0,0,0,0,0,0.83,0,0.09,0,0,0.08,0],
# [0,0,0,0,0,0,0,0,0.24,0,0,0.35,0.04,0,0,0.37],
# [0,0,0,0,0,0,0,0.27,0.18,0.13,0,0,0.14,0.03,0.25,0],
# [0,0,0,0,0,0,0,0,0,0,0,0.37,0.16,0,0.47,0],
# [0,0,0,0,0,0,0,0,0,0,0,0.15,0,0,0,0.85]]


# d = np.array([[0.07,0.2,0,0,0.73,0,0,0,0,0,0,0,0,0,0,0],
#               [0.16,0.72,0,0.04,0.08,0,0,0,0,0,0,0,0,0,0,0],
#               [0,0.27,0.23,0.16,0,0.22,0.12,0,0,0,0,0,0,0,0,0],
#               [0.18,0.39,0,0.05,0,0,0,0,0.05,0.33,0,0,0,0,0,0],
# [0.19,0,0,0,0.64,0.17,0,0,0,0,0,0,0,0,0,0],
# [0.26,0.02,0,0,0.22,0.14,0.13,0.13,0.1,0,0,0,0,0,0,0],
# [0,0,0.37,0,0,0.33,0.07,0,0.23,0,0,0,0,0,0,0],
# [0,0,0,0.15,0,0,0,0.05,0.23,0,0.22,0,0,0.35,0,0],
# [0,0,0,0.31,0.27,0,0,0.37,0.05,0,0,0,0,0,0,0],
# [0,0,0,0.29,0.2,0,0.2,0,0,0.04,0.08,0.19,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0.53,0,0,0,0,0.47],
# [0,0,0,0,0,0,0,0,0,0.83,0,0.09,0,0,0.08,0],
# [0,0,0,0,0,0,0,0,0.24,0,0,0.35,0.04,0,0,0.37],
# [0,0,0,0,0,0,0,0.27,0.18,0.13,0,0,0.14,0.03,0.25,0],
# [0,0,0,0,0,0,0,0,0,0,0,0.37,0.16,0,0.47,0],
# [0,0,0,0,0,0,0,0,0,0,0,0.15,0,0,0,0.85]])
# for l in range(1, k):
#     for i in range(len(a)):
#         for j in range(len(a)):
#             c[i][j] = 0
#             for m in range(len(a)):
#                 if m != j:
#                     c[i][j] += b[m][j] * a[i][m]
#     b = copy.deepcopy(c)
#     d = d + np.array(b)
# print(d[i1][j1])          
# Ответ: 0.13658336916353


#task4
